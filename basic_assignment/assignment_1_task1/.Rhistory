measure = "confidence", shading = "lift")
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
plot(associa_rules_ir, method = "paracoord",
measure = "confidence", shading = "lift")
# what not following an ir course lead to
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (lhs="ml=yes",rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
plot(associa_rules_ir, method = "paracoord",
measure = "confidence", shading = "lift")
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
# what not following an ir course lead to
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (rhs="ir=1"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
associa_rules = apriori(data = dataset_courses[,1:2],
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift')[1:10])
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
associa_rules = apriori(data = dataset_courses[,1:3],
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
associa_rules = apriori(data = dataset_courses[,1:2],
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
dataset_courses[,1:2]
associa_rules = apriori(data = dataset_courses[,1:3],
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
image(dataset_courses)
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
table(dataset_courses)
summary(dataset_courses)
dataset_courses <- data %>%
select(ml,ir,db,stats)
summary(dataset_courses)
names(c(ml,ir,db,stats))
dataset_courses <- data %>%
select(ml,ir,db,stats) %>%
filter(ir!="unknown", stats !="unknown", db!="unknown")
dataset_courses <- as(dataset_courses, "transactions")
image(dataset_courses)
# Fitting model
# Training Apriori on the dataset
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01,
confidence = 0.5))
# Plot
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
# what led to have not followed an ir course
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
# what led to have not followed an ir course
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
# what led to have not followed an ir course
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
plot(associa_rules_ir)
plot(associa_rules_ir, method = "paracoord",
measure = "confidence", shading = "lift")
# what not following an ir course lead to
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (lhs="ir=1"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
# ir=0 led to follow what other courses
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list lhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
# ir=0 led to follow what other courses
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list(default="lhs", lhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
rules_conf
# ir=0 led to follow what other courses
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.02, confidence = 0.5),
appearance = list(default="lhs", lhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
# what other courses where followed for having ir=0
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (rhs="ir=0"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
# what other courses where followed for having stats = yes
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (rhs="stats = yes"), control = list (verbose=F))
# what other courses where followed for having stats = yes
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (rhs="stats = mu"), control = list (verbose=F))
# what other courses where followed for having stats = yes
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (default="lhs",rhs="stats = mu"), control = list (verbose=F))
# what other courses where followed for having stats = yes
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (default="lhs", rhs="ml=yes"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
pie(table(stats), labels = names(stats))
hist(age)
associa_rules_ir <-  apriori(data = dataset_courses,
parameter = list(support = 0.2, confidence = 0.5),
appearance = list (default="lhs", rhs="ml=yes"), control = list (verbose=F))
rules_conf <- sort(associa_rules_ir, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
plot(associa_rules_ir, method = "paracoord",
measure = "confidence", shading = "lift")
plot(associa_rules_ir, method = "graph",
measure = "confidence", shading = "lift")
##### stress and courses ####
dataset_courses <- data %>%
select(ml,ir,db,stats, stress) %>%
mutate(stress_level = case_when(
stress >= 0 & stress <=33 ~ "low",
(stress > 33 & stress <=66) ~ "mid",
stress > 66 & stress <=100 ~ "high",
is.na(stress) ~ "NA",
TRUE ~ "Other"
)) %>%
filter(ir!="unknown", stats !="unknown", db!="unknown")
dataset_courses
dataset_courses <- as(dataset_courses, "transactions")
# Fitting model
# Training Apriori on the dataset
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01,
confidence = 0.5))
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(sort(associa_rules, by = 'lift'))
# Visualising the results
head(inspect(sort(associa_rules, by = 'lift')))
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
# Fitting model
# Training Apriori on the dataset
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (default="lhs", rhs="stress=[30.7,67.7)"), control = list (verbose=F))
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
dataset_courses <- data %>%
mutate(stress_level = case_when(
stress >= 0 & stress <=33 ~ "low",
(stress > 33 & stress <=66) ~ "mid",
stress > 66 & stress <=100 ~ "high",
is.na(stress) ~ "NA",
TRUE ~ "Other"
)) %>%
filter(ir!="unknown", stats !="unknown", db!="unknown")  %>%
select(ml,ir,db,stats, stress_level)
dataset_courses <- as(dataset_courses, "transactions")
# Fitting model
# Training Apriori on the dataset
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (default="lhs", rhs="stress=[30.7,67.7)"), control = list (verbose=F))
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
# Fitting model
# Training Apriori on the dataset
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list (default="lhs", rhs="stress_level=mid"), control = list (verbose=F))
itemFrequencyPlot(dataset_courses, topN = 10)
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5)
)
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))$rhs
?inspect
# Visualising the results
inspect(head(sort(associa_rules, by = 'lift')))[,2]
# Visualising the results
inspect(head(sort(associa_rules, by = 'confidence')))
associa_rules = apriori(data = dataset_courses,
parameter = list(support = 0.01, confidence = 0.5),
appearance = list(default="lhs", rhs=c("stress_level=low", "stress_level=mid", "stress_level=high")))
# Visualising the results
inspect(head(sort(associa_rules, by = 'confidence')))
# Visualising the results
inspect(sort(associa_rules, by = 'confidence'))
plot(associa_rules, method = "graph",
measure = "confidence", shading = "lift")
spotify_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
summary(spotify_songs)
fi1 <- lm(track_popularity~playlist_genre+playlist_subgenre+
danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
summary(fit1)
fit1 <- lm(track_popularity~playlist_genre+playlist_subgenre+
danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
summary(fit1)
fit1 <- lm(track_popularity~playlist_genre+
danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
summary(fit1)
fit2 <- lm(track_popularity~playlist_genre+
danceability+energy+key+loudness+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
summary(fit2)
fit3 <- lm(track_popularity~playlist_genre+
danceability+energy+loudness+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
summary(fit3)
fit4 <- lm(track_popularity~playlist_genre+
danceability+energy+loudness+speechiness+acousticness+instrumentalness+
liveness+tempo+duration_ms, data=spotify_songs)
summary(fit4)
fit5 <- lm(track_popularity~playlist_genre+
danceability+energy+loudness+acousticness+instrumentalness+
liveness+tempo+duration_ms, data=spotify_songs)
summary(fit5)
predict(fit5)
plot(predict(fit5))
fitted(fit5)
plot(fitted(fit5))
?predict
detach(spotify_songs)
qqnorm(spotify_songs$track_popularity[track_popularity!=0])
qqnorm(spotify_songs$track_popularity[spotify_songs$track_popularity!=0])
qqline(spotify_songs$track_popularity[spotify_songs$track_popularity!=0])
summary(fit5)
plot(fitted(fit5), track_popularity)
plot(fitted(fit5), spotify_songs$track_popularity)
abline()
abline(y=x, col="red")
?abline
abline(a,b, col="red")
fit1 <- lm(track_popularity~playlist_genre+
danceability+energy+key+loudness+mode+speechiness+acousticness+instrumentalness+
liveness+valence+tempo+duration_ms, data=spotify_songs)
# loading data
spotify_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv')
# split dataset
library(caret)
indxTrain <- createDataPartition(y = spotify_songs$track_popularity, p = 0.6, list = FALSE)
training <- spotify_songs[indxTrain,]
testing <- spotify_songs[-indxTrain,]
prop.table(table(training$Subgroup))
prop.table(table(training$track_popularity))
hist(training$track_popularity)
hist(training$track_popularity, prob=T)
View(training)
per(mfrow=c(3,1))
hist(training$track_popularity, prob=T)
par(mfrow=c(3,1))
hist(training$track_popularity, prob=T)
hist(testing$track_popularity, prob=T)
hist(spotify_songs$track_popularity, prob=T)
par(mfrow=c(1,1))
pred <- predict(fit, newdata=testing)
fit <- lm(track_popularity~playlist_genre+
danceability+energy+loudness+acousticness+instrumentalness+
liveness+tempo+duration_ms, data=training)
pred <- predict(fit, newdata=testing)
sqrt(mean((pred-testing$track_popularity)^2))
plot(pred)
points(testing$track_popularity)
plot(pred)
points(testing$track_popularity, col=2)
library(tidyverse)
library(rstudioapi)
# set working directory
setwd(dirname(getActiveDocumentContext()$path))
data <- read.csv2("data/final/data_clean.csv", sep=";", row.names = 1)
boxplot(rn~gender)
attach(data)
pie(table(gender))
hist(rn[gender=="female"])
hist(rn[gender=="male"])
hist(rn[gender=="unknwon"])
table(rn[gender=="female"])
table(rn, gender)
table(rn, gender)[,1]
sum(table(rn, gender)[,1])
sum(table(rn, gender)[,2])
summary(kruskal.test(rn~gender))
kruskal.test(rn~gender)
summary(aov(rn~gender))
kruskal.test(rn~gender)
hist(rn[gender=="female"])
hist(rn[gender=="male"])
hist(rn[gender=="unknwon"])
hist(rn[gender=="unknown"])
boxplot(rn~gender)
pairwise.t.test(rn, gender)
hist(rn)
hist(gain)
hist(stress)
?ks.test
ks.test(stress, "punif")
hist(stress)
ks.test(stress, "punif", 0,100)
ks.test(rn, stress, "punif", 0,10)
hist(rn)
hist(rn)
ks.test(rn, "punif", 0,10)
shapiro.test(stress)
hist(stress)
boxplot(rn~gender)
summary(aov(rn~gender))
pairwise.t.test(rn, gender)
kruskal.test(rn~gender)
Kolmogorov-Smirnov
?pairwise.t.test
pairwise.wilcoxon.test(rn, gender)
pairwise.wilcox.test(rn, gender)
?pairwise.wilcox.test
pairwise.wilcox.test(rn, gender, p.adjust.method="Bonferroni")
pairwise.wilcox.test(rn, gender, p.adjust.method="bonferroni")
table(gender)
boxplot(rn~gender)
# Basic box plot
p <- ggplot(data, aes(x=gender, y=rn)) +
geom_boxplot()
p
library(ggplot2)
# Basic box plot
p <- ggplot(data, aes(x=gender, y=rn)) +
geom_boxplot()
p
# Basic box plot
p <- ggplot(data, aes(x=gender, y=rn)) +
geom_boxplot() +
xlab("Gender") +
ylab("Random number")
p
# load packages
library(tidyverse)
library(rstudioapi)
library(lubridate)
library(arules)
library(arulesViz)
# set working directory
setwd(dirname(getActiveDocumentContext()$path))
# load the data
data <- read_delim("data/final/data_clean.csv", delim = ",")
data <- data %>%
mutate(gain = str_replace(gain, ",", "."),
gain = as.numeric(gain)) %>%
mutate(birthday = dmy(birthday))
# load packages
library(tidyverse)
library(rstudioapi)
library(lubridate)
library(arules)
library(arulesViz)
# set working directory
setwd(dirname(getActiveDocumentContext()$path))
# load the data
data <- read_delim("data/final/data_clean.csv", delim = ";")
data <- data %>%
mutate(gain = str_replace(gain, ",", "."),
gain = as.numeric(gain)) %>%
mutate(birthday = dmy(birthday))
# extract hour from the bed time answer
data <- data %>%
mutate(Timestamp = mdy_hms(Timestamp)) %>%
mutate(bed_time = hms(bed_time),
bed_hour = hour(bed_time),
bed_minutes = minute(bed_time)) %>%
mutate(hour_survey = hour(Timestamp))
# time they went to sleep
extra_var <- data %>%
mutate(went_to_bed = case_when(
bed_hour >= 19 & bed_hour <=21 ~ "early",
(bed_hour > 21 & bed_hour <=24) | (bed_hour >= 0 & bed_hour <=1)  ~ "normal",
bed_hour > 1 & bed_hour <=5 ~ "late",
is.na(bed_hour) ~ "NA",
TRUE ~ "Other"
)) %>%
# week day of the form
mutate(weekday = as.factor(wday(Timestamp, week_start = 1))) %>%
# stress level
mutate(stress_level = case_when(
stress >= 0 & stress <=33 ~ "low",
(stress > 33 & stress <=66) ~ "mid",
stress > 66 & stress <=100 ~ "high",
is.na(stress) ~ "NA",
TRUE ~ "Other"
)) %>%
mutate(before_lecture = Timestamp < "2021-03-30 13:30:00") %>%
mutate(birthday_wday = wday(birthday, week_start = getOption("lubridate.week.start", 1)))
extra_var %>%
group_by(before_lecture, gender) %>%
summarise(n = n()) %>%
group_by(gender) %>%
mutate(n_gender = sum(n)) %>%
ungroup() %>%
mutate(percent = n/n_gender * 100)
filtred <- extra_var %>%
filter(!is.na(birthday),
gender != "unknown")
# most common birthday weekday?
filtred %>%
group_by(birthday_wday) %>%
summarise(n = n()) %>%
mutate(n_all = sum(n),
percent = n/n_all)
# is there a difference between birtday weekday and gender?
filtred %>%
group_by(birthday_wday, gender) %>%
summarise(n = n())  %>%
group_by(gender) %>%
mutate(n_gender = sum(n)) %>%
ungroup() %>%
mutate(percent = n/n_gender * 100)
# are there people sharing the same birhtday
filtred %>%
group_by(birthday) %>%
count() %>%
arrange(-n)
plot(table(chocolate, gender))
plot(gain[gain<101], stress[gain<101])
plot(stress, rn)
